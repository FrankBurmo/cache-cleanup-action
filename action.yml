name: 'Cache Cleanup Action'
description: 'Removes unused GitHub Actions caches based on PR status and age'
author: 'Frank FinnÃ¸y Burmo'

inputs:
  main-branch-retention-days:
    description: 'Number of days before main branch caches are deleted'
    required: false
    default: '7'
  github-token:
    description: 'GitHub token with permission to delete caches'
    required: false
    default: ${{ github.token }}

runs:
  using: 'composite'
  steps:
    - name: Delete unused caches
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const mainBranchRetentionDays = parseInt('${{ inputs.main-branch-retention-days }}');
          
          const caches = await github.rest.actions.getActionsCacheList({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          console.log(`Total number of caches: ${caches.data.total_count}`);
          
          // Get all open pull requests
          const pulls = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open'
          });
          
          console.log(`Number of open pull requests: ${pulls.data.length}`);
          
          // Create a list of all active PR branch references
          const activeBranches = pulls.data.map(pr => pr.head.ref);
          console.log('Active PR branches:', activeBranches);
          
          let deletedCount = 0;
          
          // Process all caches
          for (const cache of caches.data.actions_caches) {
            // Check if the cache is from a PR branch
            if (cache.ref && cache.ref.includes('refs/pull/')) {
              // Extract PR number from the ref (format: refs/pull/X/merge or refs/pull/X/head)
              const prMatch = cache.ref.match(/refs\/pull\/(\d+)/);
              if (prMatch) {
                const prNumber = parseInt(prMatch[1]);
                
                // Check if this PR is still open
                const isPrActive = pulls.data.some(pr => pr.number === prNumber);
                
                if (!isPrActive) {
                  console.log(`Deleting cache for closed PR #${prNumber}: ${cache.key} (${cache.ref})`);
                  await github.rest.actions.deleteActionsCacheById({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    cache_id: cache.id
                  });
                  deletedCount++;
                }
              }
            } else if (cache.ref && cache.ref.includes('refs/heads/main')) {
              // Check if the cache is from main branch and hasn't been used for X days (configurable)
              const retentionDaysAgo = new Date();
              retentionDaysAgo.setDate(retentionDaysAgo.getDate() - mainBranchRetentionDays);
              const lastUsed = new Date(cache.last_accessed_at);
              
              if (lastUsed < retentionDaysAgo) {
                console.log(`Deleting old cache from main branch: ${cache.key} (${cache.ref})`);
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id
                });
                deletedCount++;
              }
            }
          }
          
          console.log(`Cache cleanup completed! Deleted ${deletedCount} caches.`);
